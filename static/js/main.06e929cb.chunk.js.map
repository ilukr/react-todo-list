{"version":3,"sources":["components/TodoInput.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","this","props","item","handleChange","handleSubmit","editItem","className","onSubmit","type","placeholder","value","onChange","Component","TodoItem","title","handleDelete","handleEdit","onClick","TodoList","items","clearList","map","key","id","App","state","uuid","e","setState","target","preventDefault","newItem","updatedItems","filteredItems","filter","selectedItem","find","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.06e929cb.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class TodoInput extends Component {\r\n    render() {\r\n        const { item, handleChange, handleSubmit, editItem } = this.props;\r\n\r\n        return (\r\n            <div className=\"card card-body my-3\">\r\n                <form onSubmit={ handleSubmit }>\r\n                    <div className=\"input-group\">\r\n                        <div className=\"input-group-prepend\">\r\n                            <div className=\"input-group-text bg-primary text-white\">\r\n                                <i className=\"fas fa-book\"></i>\r\n                            </div>\r\n                        </div>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control text-capitalize\" placeholder=\"add a todo item\"\r\n                            value={ item }\r\n                            onChange={ handleChange }\r\n                        />\r\n                    </div>\r\n                    <button\r\n                        type=\"submit\"\r\n                        className={ editItem ? 'btn btn-block btn-success mt-3 text-capitalize' : 'btn btn-block btn-primary mt-3 text-capitalize' }\r\n                    >\r\n                        { editItem ? 'edit item' : 'add item' }\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class TodoItem extends Component {\r\n    render() {\r\n        const { title, handleDelete, handleEdit } = this.props;\r\n\r\n        return (\r\n            <li className=\"list-group-item text-capitalize d-flex justify-content-between my-2\">\r\n                <h6>{ title }</h6>\r\n                <div className=\"todo-icon\">\r\n                    <span className=\"mx-2 text-success\" onClick={ handleEdit }>\r\n                        <i className=\"fas fa-pen\"></i>\r\n                    </span>\r\n                    <span className=\"mx-2 text-danger\" onClick={ handleDelete }>\r\n                        <i className=\"fas fa-trash\"></i>\r\n                    </span>\r\n                </div>\r\n            </li>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport TodoItem from './TodoItem'\r\n\r\nexport default class TodoList extends Component {\r\n    render() {\r\n        const { items, clearList, handleDelete, handleEdit } = this.props;\r\n\r\n        return (\r\n            <ul className=\"list-group my-5\">\r\n                <h3 className=\"text-capitalize text-center\">todo list</h3>\r\n\r\n                {\r\n                    items.map(item => {\r\n                        return(\r\n                            <TodoItem\r\n                                key={ item.id }\r\n                                title={ item.title }\r\n                                handleDelete={ () => handleDelete(item.id) }\r\n                                handleEdit={ () => handleEdit(item.id) }\r\n                            />\r\n                        )\r\n                    })\r\n                }\r\n                \r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-danger btn-block text-capitalize mt-5\"\r\n                    onClick={ clearList }\r\n                >clear list</button>\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport TodoInput from './components/TodoInput'\r\nimport TodoList from './components/TodoList'\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css'\r\nimport { v4 as uuid } from 'uuid'\r\n\r\nclass App extends Component {\r\n  state = {\r\n    items: [],\r\n    id: uuid(),\r\n    item: '',\r\n    editItem: false\r\n  }\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      item: e.target.value\r\n    })\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    if (!this.state.item) return;\r\n    \r\n    const newItem = {\r\n      id: this.state.id,\r\n      title: this.state.item\r\n    };\r\n\r\n    const updatedItems = [...this.state.items, newItem];\r\n\r\n    this.setState({\r\n      items: updatedItems,\r\n      item: '',\r\n      id: uuid(),\r\n      editItem: false\r\n    })\r\n  }\r\n\r\n  clearList = () => {\r\n    this.setState({\r\n      items: []\r\n    })\r\n  }\r\n\r\n  handleDelete = id => {\r\n    const filteredItems = this.state.items.filter(item => item.id !== id);\r\n    this.setState({\r\n      items: filteredItems\r\n    })\r\n  }\r\n\r\n  handleEdit = id => {\r\n    const filteredItems = this.state.items.filter(item => item.id !== id);\r\n    const selectedItem = this.state.items.find(item => item.id === id);\r\n\r\n    this.setState({\r\n      items: filteredItems,\r\n      item: selectedItem.title,\r\n      id: selectedItem.id,\r\n      editItem: true\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-10 mx-auto col-md-8 mt-4\">\r\n            <h3 className=\"text-capitalize text-center\">todo input</h3>\r\n            <TodoInput\r\n              item={ this.state.item }\r\n              handleChange={ this.handleChange }\r\n              handleSubmit={ this.handleSubmit }\r\n              editItem={ this.state.editItem }\r\n            />\r\n            <TodoList\r\n              items={ this.state.items }\r\n              clearList={ this.clearList }\r\n              handleDelete={ this.handleDelete }\r\n              handleEdit={ this.handleEdit }\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}